// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	gen "github.com/hubkudev/sentinel/gen"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// CheckAdminExist provides a mock function with given fields: ctx
func (_m *UserRepo) CheckAdminExist(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckAdminExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, input
func (_m *UserRepo) CreateUser(ctx context.Context, input *gen.CreateUserParams) (gen.CreateUserRow, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 gen.CreateUserRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateUserParams) (gen.CreateUserRow, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.CreateUserParams) gen.CreateUserRow); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(gen.CreateUserRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.CreateUserParams) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepo) FindUserByEmail(ctx context.Context, email string) (gen.FindUserByEmailRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 gen.FindUserByEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gen.FindUserByEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gen.FindUserByEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(gen.FindUserByEmailRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmailWithHash provides a mock function with given fields: ctx, email
func (_m *UserRepo) FindUserByEmailWithHash(ctx context.Context, email string) (gen.FindUserByEmailWithHashRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmailWithHash")
	}

	var r0 gen.FindUserByEmailWithHashRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gen.FindUserByEmailWithHashRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gen.FindUserByEmailWithHashRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(gen.FindUserByEmailWithHashRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: ctx, id
func (_m *UserRepo) FindUserByID(ctx context.Context, id uuid.UUID) (gen.FindUserByIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 gen.FindUserByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (gen.FindUserByIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) gen.FindUserByIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gen.FindUserByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByPublicKey provides a mock function with given fields: ctx, key
func (_m *UserRepo) FindUserByPublicKey(ctx context.Context, key string) (gen.FindUserByPublicKeyRow, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByPublicKey")
	}

	var r0 gen.FindUserByPublicKeyRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gen.FindUserByPublicKeyRow, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gen.FindUserByPublicKeyRow); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(gen.FindUserByPublicKeyRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserPublicKey provides a mock function with given fields: ctx, id
func (_m *UserRepo) FindUserPublicKey(ctx context.Context, id uuid.UUID) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserPublicKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
