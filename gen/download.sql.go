// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: download.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const downloadLastMonthData = `-- name: DownloadLastMonthData :many
SELECT id, event_type, event_label, page_url, element_path, element_type, ip_addr, user_agent, browser_name, country, region, city, session_id, device_type, time_on_page, screen_resolution, fired_at, received_at, user_id, project_id FROM events 
WHERE user_id = $1 AND project_id = $2
AND received_at > date_trunc('month', NOW())
`

type DownloadLastMonthDataParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) DownloadLastMonthData(ctx context.Context, arg DownloadLastMonthDataParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, downloadLastMonthData, arg.UserID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.EventLabel,
			&i.PageUrl,
			&i.ElementPath,
			&i.ElementType,
			&i.IpAddr,
			&i.UserAgent,
			&i.BrowserName,
			&i.Country,
			&i.Region,
			&i.City,
			&i.SessionID,
			&i.DeviceType,
			&i.TimeOnPage,
			&i.ScreenResolution,
			&i.FiredAt,
			&i.ReceivedAt,
			&i.UserID,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventTableHeaders = `-- name: GetEventTableHeaders :many
SELECT column_name::text FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'events'
`

func (q *Queries) GetEventTableHeaders(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getEventTableHeaders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var column_name string
		if err := rows.Scan(&column_name); err != nil {
			return nil, err
		}
		items = append(items, column_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
