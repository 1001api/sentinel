// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: api-key.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO 
    api_keys(name, token, user_id, created_at, expired_at) VALUES ($1, $2, $3, $4, $5) 
RETURNING name, token, created_at, expired_at
`

type CreateAPIKeyParams struct {
	Name      string
	Token     string
	UserID    uuid.UUID
	CreatedAt pgtype.Timestamptz
	ExpiredAt pgtype.Timestamptz
}

type CreateAPIKeyRow struct {
	Name      string
	Token     string
	CreatedAt pgtype.Timestamptz
	ExpiredAt pgtype.Timestamptz
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (CreateAPIKeyRow, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.Name,
		arg.Token,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiredAt,
	)
	var i CreateAPIKeyRow
	err := row.Scan(
		&i.Name,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys WHERE user_id = $1 AND id = $2
`

type DeleteAPIKeyParams struct {
	UserID uuid.UUID
	ID     int32
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, arg.UserID, arg.ID)
	return err
}

const findAllAPIKeys = `-- name: FindAllAPIKeys :many
SELECT id, name, token, created_at, expired_at FROM api_keys WHERE user_id = $1
`

type FindAllAPIKeysRow struct {
	ID        int32
	Name      string
	Token     string
	CreatedAt pgtype.Timestamptz
	ExpiredAt pgtype.Timestamptz
}

func (q *Queries) FindAllAPIKeys(ctx context.Context, userID uuid.UUID) ([]FindAllAPIKeysRow, error) {
	rows, err := q.db.Query(ctx, findAllAPIKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllAPIKeysRow
	for rows.Next() {
		var i FindAllAPIKeysRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Token,
			&i.CreatedAt,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
